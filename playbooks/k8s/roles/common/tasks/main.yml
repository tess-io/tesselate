- name: Populate custom facts
  ansible.builtin.set_fact:
    common_arch: '{{ arch_conversion[ansible_architecture] }}'
    common_k8s_version: '{{ (version == "stable") | ternary(stable, version) }}'
  vars:
    stable: '{{ lookup("ansible.builtin.url", "https://dl.k8s.io/release/stable.txt", timeout = 20) }}'
    arch_conversion:
      x86_64: amd64
  register: populate
  until: populate is success
  delay: 1
  retries: 10

- name: Populate service facts
  ansible.builtin.service_facts:

- name: Disable cloud-init if enabled
  ansible.builtin.file:
    path: /etc/cloud/cloud-init.disabled
    state: touch
    mode: '0640'
  when: (ansible_facts.services['cloud-init'].state | default ('stopped')) == 'started'

- name: Installation base system software
  ansible.builtin.package:
    name: '{{ item }}'
    state: present
  loop: '{{ [] | zip_longest(install_packages + ["ansible-requirements"], fillvalue=distrib) | map("join", "-") | map("ansible.builtin.extract", categories) | flatten }}'
  vars:
    distrib: '{{ ansible_facts.distribution | lower }}'
    categories:
      alpine-net:
        - iproute2-ss
        - netcat-openbsd
        - bind-tools
        - iftop
        - nethogs
        - iptraf-ng
        - tcpdump
        - tshark
      alpine-prof:
        - btop
        - nethogs
        - procps
        - iotop
        - bpftrace
      alpine-tools:
        - vim
      alpine-ansible-requirements:
        - py3-cryptography

- name: Create additional file systems
  community.general.filesystem:
    dev: '{{ item.dev }}'
    state: present
    fstype: '{{ item.fs }}'
  loop: '{{ disks | default([]) }}'

- name: Mount file systems
  ansible.posix.mount:
    src: '{{ item.dev }}'
    path: '{{ item.mount }}'
    fstype: '{{ item.fs }}'
    boot: true
    state: mounted
  loop: '{{ disks | default([]) }}'

- name: Configure sysctl
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: 1
    state: present

- name: Create necessary directories
  ansible.builtin.file:
    path: '{{ data_dir }}/{{ item }}'
    state: directory
    mode: '0755'
  loop: '{{ dirs }}'
  vars:
    data_dir: '{{ disks | default([]) | selectattr("role", "eq", "data") | map(attribute="mount") | first }}'
    dirs:
      - containerd
      - kubelet

- name: Setup symbolic links to data mount point
  ansible.builtin.file:
    src: '{{ data_dir }}/{{ item | basename }}'
    path: '{{ item }}'
    state: link
    force: true
  loop: '{{ dests }}'
  vars:
    dests:
      - /var/lib/containerd
      - /var/lib/kubelet
    data_dir: '{{ disks | default([]) | selectattr("role", "eq", "data") | map(attribute="mount") | first }}'

- name: Install K8S system requirements
  ansible.builtin.package:
    name: '{{ item }}'
    state: present
  loop:
    # kubelet dependencies
    - gcompat
    - iptables
    # kubeadm dependencies
    - iproute2
    - socat
    - ethtool
    - conntrack-tools
    - cri-tools
    # container runtime
    - containerd

- name: Create necessary directories
  module_defaults:
    ansible.builtin.file:
      state: directory
  block:
    - name: Create system directories
      ansible.builtin.file:
        path: '{{ item }}'
      loop:
        - /var/log/kubelet
        - /etc/kubernetes
        - /var/log/k8s
    - name: Create installation directories
      ansible.builtin.file:
        path: '/opt/k8s/{{ common_k8s_version }}/{{ item }}'
      loop:
        - kubelet
        - kubeadm
        - kubectl

- name: Download K8S tools
  ansible.builtin.get_url:
    url: 'https://dl.k8s.io/release/{{ common_k8s_version }}/bin/linux/{{ common_arch }}/{{ item }}'
    checksum: 'sha256:https://dl.k8s.io/release/{{ common_k8s_version }}/bin/linux/{{ common_arch }}/{{ item }}.sha256'
    dest: '/opt/k8s/{{ common_k8s_version }}/{{ item }}/{{ item }}'
    mode: '0755'
  register: download
  loop:
    - kubelet
    - kubeadm
    - kubectl
  until: download is success
  delay: 5
  retries: 2

- name: Setup K8S tools links
  ansible.builtin.file:
    src: '/opt/k8s/{{ common_k8s_version }}/{{ item }}/{{ item }}'
    path: '/usr/bin/{{ item }}'
    state: link
    force: true
  loop:
    - kubelet
    - kubeadm
    - kubectl

- name: Perform OS specific actions
  ansible.builtin.include_tasks:
    file: '{{ ansible_facts.distribution | lower }}/main.yml'

- name: Enable and startup services
  ansible.builtin.service:
    name: '{{ item }}'
    state: started
    enabled: true
  loop:
    - containerd
    - kubelet
