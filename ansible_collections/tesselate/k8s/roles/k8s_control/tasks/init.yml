- name: Generate token and key
  block:
    - name: Get file stat
      ansible.builtin.stat:
        path: /tmp/tesselate-data.yml
      register: k8s_control_data_file
      become: false
      delegate_to: localhost
    - name: Generate cert
      ansible.builtin.command: kubeadm certs certificate-key
      changed_when: false
      register: k8s_control_cert
    - name: Generate token and certificate facts
      ansible.builtin.set_fact:
        k8s_control_token: '{{ left_part }}.{{ right_part }}'
        k8s_control_cert_key: '{{ k8s_control_cert.stdout }}'
      vars:
        left_part: '{{ lookup("community.general.random_string", length=6, special=false, upper=false, min_numeric=2) }}'
        right_part: '{{ lookup("community.general.random_string", length=16, special=false, upper=false, min_numeric=2) }}'
      when: not k8s_control_data_file.stat.exists
    - name: Read from file
      ansible.builtin.set_fact:
        k8s_control_token: '{{ data.token }}'
        k8s_control_cert_key: '{{ data.cert_key }}'
      vars:
        data: '{{ lookup("ansible.builtin.file", "/tmp/tesselate-data.yml") | from_yaml }}'
      when: k8s_control_data_file.stat.exists
      become: false
      delegate_to: localhost

- name: Place self signed certificates
  ansible.builtin.include_tasks:
    file: place-certs.yml

- name: K8S node initialization
  ansible.builtin.shell: |
    set -o pipefail
    kubeadm init -v3 \
      --control-plane-endpoint={{ ansible_facts.default_ipv4.address }} \
      --token={{ k8s_control_token }} \
      --certificate-key={{ k8s_control_cert_key }} \
      --pod-network-cidr={{ k8s_pod_cidr }} \
      --upload-certs 2>&1 | tee /var/log/k8s/init.log
  args:
    creates: /etc/kubernetes/kubelet.conf

- name: Place token token and key
  ansible.builtin.copy:
    content: '{{ data | to_nice_yaml }}'
    dest: /tmp/tesselate-data.yml
    mode: '0600'
  vars:
    data:
      token: '{{ k8s_control_token }}'
      cert_key: '{{ k8s_control_cert_key }}'
  delegate_to: localhost
  become: false

- name: Prepare kubectl on local and remote machine
  block:
    - name: Download kubeconfig file
      ansible.builtin.fetch:
        src: /etc/kubernetes/admin.conf
        dest: '{{ save_kubeconfig_to }}'
        flat: true
      run_once: true
    - name: Create .kube directory on remote
      ansible.builtin.file:
        path: '~/.kube'
        state: directory
        mode: '0700'
    - name: Copy administrator configuration file
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: "~/.kube/config"
        remote_src: true
        mode: '0700'
